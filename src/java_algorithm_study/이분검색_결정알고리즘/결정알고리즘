//결정 알고리즘이란?
-> 이분 검색을 이용하는 방법.

예를 들어,
어떤 문제가 요구하는 값을(Ex: 디비디의 최소 용량) 찾는 방법에서 범위(lt, rt)를 두고 요구하는 값이
가정한 범위안에서 답이 있다고 생각하고 푸는 문제이다. 즉, 해당 요구 값이 생간한 범위 내에 있어야만 사용할 수 있다.

//뮤직비디오 -> 최소 DVD 용량 구하기
public static int solution(int m, int[] arr){
    int answer = 0;
    int lt = Arrays.stream(arr).max().getAsInt();   //가정한 범위의 최솟값
    int rt = Arrays.stream(arr).sum();              //가정한 범위의 최댓값

    while(lt <= rt){                                //이분검색 시작
        int mid = (lt+rt)/2;                        //예상 값

        if(count(arr, mid)<=m){
            answer = mid;
            rt = mid-1;
        }else{
            lt = mid+1;
        }
    }
    return answer;
}

private static int count(int[] arr, int mid){
    int cnt=1;                                  //첫번째 DVD 파일
    int sum=0;                                  //합한 최소 용량
    for(int i : arr){                           //결정 알고리즘 시작
        if(sum+i > mid){
            cnt++;
            sum = i;
        }else{
            sum += i;
        }
    }                                           //결정 알고리즘 끝
    return cnt;
}

//마굿간 정하기 -> 말을 가장 머리 배치
private static void solution(int n, int k, int[] arr) {
    Arrays.sort(arr);
    int lt = 1;
    int rt = arr[n-1];
    int answer = 0;

    while(lt <= rt){
        int mid = (lt+rt)/2;

        if(count(arr, mid) >= k){
            answer = mid;
            lt = mid + 1;
        }else{
            rt = mid - 1;
        }
    }

    stringBuilder.append(answer);
}
private static int count(int[] arr, int mid) {
    int cnt = 1;                    //배치한 말의 수
    int endPoint = arr[0];          //맨 왼쪽 좌표

    for(int i=1; i<arr.length; i++){
        if(arr[i]-endPoint >= mid){
            cnt++;
            endPoint = arr[i];
        }
    }

    return cnt;
}