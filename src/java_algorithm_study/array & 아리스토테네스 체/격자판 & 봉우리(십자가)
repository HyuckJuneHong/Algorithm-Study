//격자판
[0][0] [0][1] [0][2] [0][3] [0][4]
[1][0] [1][1] [1][2] [1][3] [1][4]
[2][0] [2][1] [2][2] [2][3] [2][4]
[3][0] [3][1] [3][2] [3][3] [3][4]
[4][0] [4][1] [4][2] [4][3] [4][4]

//십자가 (봉우리)
        [i-1][j]
[i][j-1]-[i][j]-[i][j+1]
        [i+1][j]

//십자가 (봉우리) 공식
int[] dx = {-1, 0, 1, 0};
int[] dy = {0, 1, 0, -1};
for(int i=0; i<n; i++){
    for(int j=0; j<n; j++){
        for(int k=0; k<4; k++){
            int nx = i+dx[k];
            int ny = j+dy[k];
            if(arr[nx][ny] >= arr[i][j] && nx>=0 && nx<n && ny>=0 && ny<y}
                flag = false;
                break;
        }
        if(flag) cnt++;
    }
}

//arr[i][j]
00 + 01 + 02 + 03 + 04
10 + 11 + 12 + 13 + 14
20 + 21 + 22 + 23 + 24
30 + 31 + 32 + 33 + 34
40 + 41 + 42 + 43 + 44

//arr[j][i]
00 + 20 + 30 + 40
11 + 21 + 31 + 41
12 + 22 + 32 + 42
13 + 23 + 33 + 43
14 + 24 + 34 + 44

//arr[i][i]
00 + 11 + 22 + 33 + 44

//arr[i][n-i-1]
04 + 13 + 22 + 31 + 41

//임시 반장
for(int i=0; i<n; i++){                     //학생수
    for(int j=i+1; j<n; j++){               //학생수
        for(int k=0; k<5; k++){             //학급수
            if(arr[i][k] == arr[j][k]){
                cnt[i]++;
                cnt[j]++;
                break;                      //같은 학생끼리 같은 반은 더 이상 카운트하지 않는다;
            }
        }
    }
    if(cnt[i] > max){
        max = cnt[i];
        answer = i+1;
    }
}
