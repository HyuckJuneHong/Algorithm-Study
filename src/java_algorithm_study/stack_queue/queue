//공주 구하기
int cnt = 1;
while(queue.size() != 1){
    if(cnt==k){
        queue.poll();
        cnt=1;
    }
    cnt++;
    queue.offer(queue.poll());
}

//교육 과정 설계
for(char c : need.toCharArray()) queue.offer(c);
for(char c : plan.toCharArray()){
    if(queue.contains(c){
        if(c != queue.poll() return "NO";
    }
}
if(!queue.isEmpty()) return "NO";
return "YES";

//응급실
class Person{
    int id;
    int priority;

    public Person(int id, int priority) {
        this.id = id;
        this.priority = priority;
    }
}

Queue<Person> queue = new LinkedList<>();
int cnt = 1;
while(!queue.isEmpty()){
    Person temp = queue.poll();
    for(Person p : queue){
        if(p.priority > temp.priority){
            queue.offer(temp);
            temp = null;
            break;
        }
    }

    if(temp != null){
        if(temp.id == k) {
            stringBuilder.append(cnt);
            break;
        }else{
            cnt++;
        }
    }
}
