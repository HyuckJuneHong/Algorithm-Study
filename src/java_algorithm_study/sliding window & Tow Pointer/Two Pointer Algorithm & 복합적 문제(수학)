<효율성 O(n^2) -> O(n)>

//두 배열 오름차순으로 합치기
int i = j = 0;
int[] arr1 = new int[n];
int[] arr2 = new int[m];
List<Integer> list = new ArrayList<>();
while(i < n && j < m){
    if(arr1[i] < arr2[j]) list.add(arr1[i++]);
    else list.add(arr2[j++]);
}
while(i<n) answer.add(arr1[i++]);
while(j<m) answer.add(arr2[j++]);

//공통 원소 오름차순 합치기
Arrays.sort(A);
Arrays.sort(B);
while(i<n && j<m){
    if(A[i] == B[j]){
        list.add(A[i]);
        i++;
        j++;
    }
    else if(A[i] < B[j]) i++;
    else j++;
}

//연속 부분 수열 (복합적 문제)
int  sum=0, lt=0, cnt=0;
for(int rt=0; rt<n; rt++){
    sum += arr[rt];
    if(sum == m) cnt++;
    while(sum > m){
        sum -= arr[lt++];
        if(sum == m) cnt++;
    }
}

//연속된 자연수 합
int cnt=0, sum=0, lt=1;
for(int rt=1; rt<n; rt++){
    sum += rt;
    if(sum==n) cnt++;
    while(sum > n){
        sum -= lt++;
        if(sum==n) cnt++;
    }
}

//연속된 자연수 합 (수학)
int answer, cnt=1;
n--;
while(n>0){
    cnt++;
    n -= cnt
    if(n%cnt==0) answer++;
}

//최대 길이 연속 부분 수열(복합적 문제)
int max=0; cnt=0, lt=0;
for(int rt=0; rt<n; rt++){
    if(arr[rt] == 0) cnt++;
    while(cnt > k){
        if(arr[lt]==0) cnt--;
        lt++;
    }
}

//최대 길이 연속 부분 수열
int max = Integer.MIN_VALUE;
for(int i=0; i<n && n-i > max; i++){
    int sum=0, cnt=0;
    for(int j=i; j<n; j++){
        if(arr[j] == 1) sum += 1;
        else if(cnt < k){
            sum += 1;
            cnt++;
        } else break;
    }
    max = Math.max(max, sum);
}
